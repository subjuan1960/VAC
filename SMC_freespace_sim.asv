clear; clc; close all;
%% parameters
dt = 0.001;
T = 4;
t = 0:dt:T;
N = numel(t);

% Human dynamics parameters
Mh = 0.1*sin(t) + 1.5;
Dh = 0.05*sin(0.5*t) + 0.1;
% Robot dynamics parameters
Ma = 2;
Da = 0.4;

Dmin = 0.05;
Dmax = 100.0;

%% preallocation
x = zeros(1, N);
xd = zeros(1, N);
xdd = zeros(1, N);

fh = zeros(1, N);
fm = zeros(1, N);
% fm_comp = zeros(1, N);

lam = zeros(1, N);
lamh = zeros(1, N);
A = zeros(1, N);


D = zeros(1, N);
Dd = zeros(1, N);
S = zeros(1, N);
%% Sinusoidal motion profile

scenario = 2; % 1 for sine, 2 for arctan

switch scenario
    case 1
        freq = 0.1;
        amp   = 1;  % [m] amplitude
        xhd = amp * sin(2*pi*freq*t);
        xhdd = amp * 2*pi * freq * cos(2*pi*freq*t);
    case 2
        A = 0.05;
        k = 30;
        % move-and-stop using arctan profile
        xh = A * atan(k * (t-3));
        xhd = A * k ./ (1 + (k * (t-3)).^2);
        xhdd = -2 * A * k^3 * (t-3) ./ (1 + (k * (t-3)).^2).^2;
end

%% Sim loop
xd(1) = 0;
xdd(1) = 0;

fh(1) = Mh(1) * xhdd(1) + Dh(1) * xhd(1);
fm(1) = Mh(1) * (xhdd(1) - xdd(1)) + Dh(1) * (xhd(1) - xd(1));

D(1) = Da;
eps = 1e-6;
gamma = 0.05; % scaling coeff of fm
ks = 1; % sliding gain
phi = 0.01; % boundary layer width
% %%
% Fstd = 0.001;
% clamp = @(x, minVal, maxVal) max(min(x, maxVal), minVal);
%%

xdd(2) = (1/Ma) * (fh(1) - D(1) * xd(1));
xd(2) = xd(1) + xdd(2) * dt;



for k = 2:N-1
    Fs = Mh(k) * xhdd(k) + Dh(k) * xhd(k);

    S(k) = fm(k-1) * xd(k);
    
    Dd(k) = -ks * S(k);
    D(k) = D(k-1) + Dd(k) * dt;
    D(k) = min(max(D(k), Dmin), Dmax);
    
    % D(k) = clamp(Fstd / abs(xd(k-1)+ 1e-6), Dmin, Dmax);

    fm(k) = Mh(k) * (xhdd(k) - xdd(k)) + Dh(k) * (xhd(k) - xd(k));
    
    if abs(fm(k)) > 0.5
        lam(k) = Ma * xdd(k) + D(k) * xd(k) - fm(k);

        A(k) = xd(k) / xhd(k) * (xhd(k) - xhd(k-1))^2 / (xd(k) - xd(k-1))^2;
    
        lamh(k) = A(k) * (lam(k) + fm(k));
        
        xdd(k+1) = (1/Ma) * (Fs - D(k) * xd(k));
        xd(k+1) = xd(k) + xdd(k) * dt;
    end

    xdd(k+1) = (1/Ma) * (Fs - D(k) * xd(k));
    xd(k+1) = xd(k) + xdd(k) * dt;
    
end

%% Plot results

% 1) Sliding surface
figure;
subplot(4, 1, 1);
plot(t, S, "LineWidth", 1.5);
xlabel('Time [s]'); ylabel('S = Fm * xd');
title('Sliding Surface Convergence');
xlim([2.5, 3.5])
grid on;

% 2) velocity tracking
subplot(4,1,2);
plot(t, xhd, 'r--', t, xd, 'b');
xlabel('Time [s]'); ylabel('velocity [m/s]');
legend('x_hd (intent)', 'xd (robot)');
title('Velocity tracking');
xlim([2.5, 3.5])

% 3) interaction force
subplot(4,1,3);
plot(t, fm);
xlabel('Time [s]'); ylabel('Interaction Force [N]');
title('Interaction force f_m');
xlim([2.5, 3.5])

% 4) damping adaptation
subplot(4,1,4);
plot(t, D);
xlabel('Time [s]'); ylabel('Damping Nm/s');
title('Adapted Damping D(t)');
xlim([2.5, 3.5])


% %%
% Wh  = cumtrapz(t, fm .* xd);   % W_h = âˆ« F_h * \dot x dt
% Epo = cumtrapz(t, fm .* xd);   % same integral
% 
% figure;
% subplot(2,1,1);
% plot(t, Wh, 'm', 'LineWidth',1.2);
% ylabel('W_h [J]'); title('Cumulative Human Work');
% grid on;
% 
% subplot(2,1,2);
% plot(t, Epo, 'c', 'LineWidth',1.2);
% ylabel('E_{PO} [J]'); xlabel('Time [s]');
% title('Passivity Observer (E_{PO} \ge 0)');
% grid on;